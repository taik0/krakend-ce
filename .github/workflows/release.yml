on:
  release:
    types: [created]
name: Handle Release
jobs:
  generate:
    name: Create release-artifacts
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Generate the artifacts for Debian/Ubuntu/Redhat/Centos (AMD64/ARM64)
        uses: docker://krakend/builder:latest-linux-generic
        with:
          args: sh -c "git config --global --add safe.directory /github/workspace;
           export CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc ARCH=arm64 OS_TAG=_generic-linux GOARCH=arm64 GOHOSTARCH=amd64 EXTRA_LDFLAGS='-extld=aarch64-linux-gnu-gcc';
           make -e build && make -e tgz;
           make clean;
           export CC= GOARCH=amd64 ARCH=amd64 OS_TAG=_generic-linux EXTRA_LDFLAGS=;
           make -e build && make -e tgz;"
      - name: Build DEB package (AMD64)
        uses: docker://krakend/fpm:deb
        with:
          entrypoint: /bin/bash
          args: -c "make -e deb-release"
      - name: Build RPM package (AMD64)
        uses: docker://krakend/fpm:rpm
        with:
          entrypoint: /bin/bash
          args: -c "cp builder/files/rpmmacros /etc/rpm/macros;
           make -e rpm-release"
      - name: Generate the artifacts for Alpine (AMD64/ARM64)
        uses: docker://krakend/builder:latest
        with:
          args: sh -c "export GOARCH=amd64 ARCH=amd64 OS_TAG=_alpine;
           make -e build && make -e tgz;
           make clean;
           export CGO_ENABLED=1 ARCH=arm64 OS_TAG=_alpine GOARCH=arm64 GOHOSTARCH=amd64;
           export CC=aarch64-linux-musl-gcc EXTRA_LDFLAGS='-extldflags=-fuse-ld=bfd  -extld=aarch64-linux-musl-gcc';
           make -e build && make -e tgz"
      - name: Cache artifacts
        id: cache
        uses: actions/cache/save@v4
        with:
          path: |
            *.tar.gz
            *.asc
            *.deb
            *.rpm
          key: ${{github.ref}}-artifacts
  upload:
    name: Upload release-artifacts
    runs-on: ubuntu-20.04
    needs: generate
    steps:
      - name: Restore cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            *.tar.gz
            *.asc
            *.deb
            *.rpm
          key: ${{github.ref}}-artifacts
      - name: Upload the artifacts
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '*.tar.gz *.asc *.deb *.rpm checksums.txt'
  debrepo:
    name: Upload deb to apt-repo
    runs-on: ubuntu-20.04
    needs: generate
    steps:
      - name: Restore cache
        id: cache-restore-deb
        uses: actions/cache/restore@v4
        with:
          path: |
            *.deb
          key: ${{github.ref}}-artifacts
      - name: Cache multiple paths
        uses: whywaita/actions-cache-s3/save@v2
        with:
          path: |
            *.deb
          key: aptly-test
          aws-s3-bucket: ${{ secrets.AWS_S3_BUCKET_NAME }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1